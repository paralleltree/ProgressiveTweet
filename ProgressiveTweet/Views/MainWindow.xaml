<Window x:Class="ProgressiveTweet.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:ProgressiveTweet.Views"
        xmlns:vm="clr-namespace:ProgressiveTweet.ViewModels"
        Title="ProgressiveTweet"
        SizeToContent="WidthAndHeight"
        ShowActivated="False"
        WindowStyle="None" ResizeMode="NoResize" Topmost="True"
        Background="Transparent" AllowsTransparency="True"
        SizeChanged="Window_SizeChanged">

    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>

    <WindowChrome.WindowChrome>
        <WindowChrome UseAeroCaptionButtons="False"
                      CaptionHeight="0" ResizeBorderThickness="0"/>
    </WindowChrome.WindowChrome>

    <Window.Resources>
        <!-- Definitions of mappings inner View and ViewModel -->
        <DataTemplate DataType="{x:Type vm:RootThumbViewModel}">
            <v:RootThumb/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:RootMenuViewModel}">
            <v:RootMenu/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:SettingMenuViewModel}">
            <v:SettingMenu/>
        </DataTemplate>
    </Window.Resources>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Border Name="border" CornerRadius="10" BorderBrush="#99808080" BorderThickness="1" Background="#CC202020">
        <ContentControl Margin="8" Focusable="False" Name="content"
                        Content="{Binding CurrentViewModel, NotifyOnTargetUpdated=True}"/>
        <i:Interaction.Triggers>
            <i:EventTrigger EventName="TargetUpdated">
                <ei:ControlStoryboardAction>
                    <ei:ControlStoryboardAction.Storyboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="content"
                                                           Storyboard.TargetProperty="Opacity">
                                <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="0.2"/>
                                <LinearDoubleKeyFrame KeyTime="0:0:0.4" Value="1.0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ei:ControlStoryboardAction.Storyboard>
                </ei:ControlStoryboardAction>
            </i:EventTrigger>
        </i:Interaction.Triggers>
    </Border>
</Window>
